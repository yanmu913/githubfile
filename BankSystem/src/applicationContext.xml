<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	
	<!-- 配置c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/bankSystem"></property>
		<property name="user" value="root"></property>
		<property name="password" value="111111"></property>
		
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10"></property>
		
		<!--连接池中保留的最小连接数。Default: 3 -->
		<property name="minPoolSize" value="3"></property>
		
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="30"></property>
		
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3"></property>
		
		<!--最大空闲时间，1800秒内未使用则连接被丢弃，若为0则永不丢弃。Default: 0 -->
	    <property name="maxIdleTime" value="1800"></property>
	</bean>
	
	<!-- 配置会话工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 为会话工厂注入数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置hibernate信息 -->
		<property name="hibernateProperties">
			<props>
				<!-- 方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- 显示sql语句到日志 -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 加载时自动更新数据库结构 -->
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- 默认是auto, 即自动去classpath下找bean-validation的包 -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath:com/banksystem/entity/account/Account.hbm.xml</value>
				<value>classpath:com/banksystem/entity/transactionrecord/TransactionRecord.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务 -->
	<!-- 1.配置事务管理类 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
  		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 2.定义事务处理规则 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
	<!-- 配置事务的属性 -->
		<tx:attributes>
			<!-- 例：
			 get和set开头的方法不是用事务
			-->
			<!-- <tx:method name="*"/> -->
			<tx:method name="set*" propagation="NEVER"/>
			<tx:method name="get*" propagation="NEVER"/>
			<!-- 查找的方法 select开头的方法是用事务
				 readOnly
			 -->
			<tx:method name="select*" read-only="true"/>
			<!-- 增、删、改方法需要提交数据 使用Required
			 Required 如果当前存在事务对象，使用当前对象
						   如果没有创建一个新的事务对象 
			-->
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 3.配置切面的织入范围, 事务管理应该在哪里进行介入 -->
	<aop:config>
		<!-- 配置切面的切入点 -->
		<aop:pointcut id="servicePointCut" 
		 expression="execution(* com.banksystem.service.impl.*.*(..))" />
		<!-- 配置事务的具体处理规则 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointCut"/>	
	</aop:config>
	
	<!-- 配置HibernateTemplate模板 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<!-- hibernatTemplate类中有一个成员变量 sessionFactory -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 配置UserDao -->
	<!-- <bean id="userDao" class="com.dao.impl.UserDaoImpl">
		<property name="ht" ref="hibernateTemplate"></property>
	</bean>
	
	配置UserService
	<bean id="userService" class="com.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	
	配置UserAction
	注: Struts2框架是基于类进行设计执行, 因此必须修改scope的值为prototype.
			表示action类是多例的. 默认是singleton单例
	
	<bean id="userAction" class="com.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean> -->
	<bean id="accountDao" class="com.banksystem.dao.account.impl.AccountDaoImpl">
		<property name="ht" ref="hibernateTemplate"></property>
	</bean>
	<bean id="accountService" class="com.banksystem.service.impl.AccountServiceImpl">
		<property name="accountDao" ref="accountDao"></property>
	</bean>
	<bean id="accountAction" class="com.banksystem.action.AccountAction" >
		<property name="accountService" ref="accountService"></property>
	</bean>
	
	<bean id="transactionRecordDao" class="com.banksystem.dao.transactionrecord.impl.TransactionRecordDaoImpl">
		<property name="ht" ref="hibernateTemplate"></property>
	</bean>
	<bean id="transactionRecordService" class="com.banksystem.service.impl.TransactionRecordServiceImpl" >
		<property name="transactionRecordDao" ref="transactionRecordDao"></property>
	</bean>
	<!-- <bean id="transactionRecordAction" class="com.banksystem.action.transactionRecordAction" scope="prototype">
		<property name="transactionRecordService" ref="transactionRecordService"></property>
	</bean> -->
</beans>